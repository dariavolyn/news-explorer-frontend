{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport validate from '../../utils/validate.js'; // hook for form control\n\nexport function useForm() {\n  _s();\n\n  const [values, setValues] = React.useState({});\n\n  const handleChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  return {\n    values,\n    handleChange,\n    setValues\n  };\n} // hook for form control and form validation\n\n_s(useForm, \"jj5GeB6VwF55135U6pCdiR2sE48=\");\n\nexport function useFormWithValidation() {\n  _s2();\n\n  const [values, setValues] = React.useState({});\n  const [errors, setErrors] = React.useState({});\n  const [isValid, setIsValid] = React.useState(false);\n\n  const submitForm = e => {\n    e.preventDefault();\n    console.log(values);\n  };\n\n  const resetForm = useCallback((newValues = {}, newErrors = {}, newIsValid = false) => {\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n  }, [setValues, setErrors, setIsValid]);\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm,\n    submitForm\n  };\n}\n\n_s2(useFormWithValidation, \"msMIfc7pG71dSFDSlZa7+l3GN6k=\");\n\n;","map":{"version":3,"sources":["/Users/dashon/Desktop/news-explorer-frontend/src/components/FormValidation/FormValidation.js"],"names":["React","useCallback","validate","useForm","values","setValues","useState","handleChange","event","target","value","name","useFormWithValidation","errors","setErrors","isValid","setIsValid","submitForm","e","preventDefault","console","log","resetForm","newValues","newErrors","newIsValid"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,QAAP,MAAqB,yBAArB,C,CAEA;;AACA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACtB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,KAAK,CAACM,QAAN,CAAe,EAAf,CAA5B;;AAEA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACAN,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACO,IAAD,GAAQD;AAArB,KAAD,CAAT;AACH,GALD;;AAOA,SAAO;AAAEN,IAAAA,MAAF;AAAUG,IAAAA,YAAV;AAAwBF,IAAAA;AAAxB,GAAP;AACH,C,CAED;;GAbgBF,O;;AAchB,OAAO,SAASS,qBAAT,GAAiC;AAAA;;AACpC,QAAM,CAACR,MAAD,EAASC,SAAT,IAAsBL,KAAK,CAACM,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBd,KAAK,CAACM,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBhB,KAAK,CAACM,QAAN,CAAe,KAAf,CAA9B;;AAIA,QAAMW,UAAU,GAAIC,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AACH,GAHD;;AAKA,QAAMkB,SAAS,GAAGrB,WAAW,CACzB,CAACsB,SAAS,GAAG,EAAb,EAAiBC,SAAS,GAAG,EAA7B,EAAiCC,UAAU,GAAG,KAA9C,KAAwD;AACpDpB,IAAAA,SAAS,CAACkB,SAAD,CAAT;AACAT,IAAAA,SAAS,CAACU,SAAD,CAAT;AACAR,IAAAA,UAAU,CAACS,UAAD,CAAV;AACH,GALwB,EAMzB,CAACpB,SAAD,EAAYS,SAAZ,EAAuBE,UAAvB,CANyB,CAA7B;AASA,SAAO;AAAEZ,IAAAA,MAAF;AAAUG,IAAAA,YAAV;AAAwBM,IAAAA,MAAxB;AAAgCE,IAAAA,OAAhC;AAAyCO,IAAAA,SAAzC;AAAoDL,IAAAA;AAApD,GAAP;AACH;;IAtBeL,qB;;AAsBf","sourcesContent":["import React, { useCallback } from \"react\";\nimport validate from '../../utils/validate.js';\n\n// hook for form control\nexport function useForm() {\n    const [values, setValues] = React.useState({});\n\n    const handleChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        setValues({ ...values, [name]: value });\n    };\n\n    return { values, handleChange, setValues };\n}\n\n// hook for form control and form validation\nexport function useFormWithValidation() {\n    const [values, setValues] = React.useState({});\n    const [errors, setErrors] = React.useState({});\n    const [isValid, setIsValid] = React.useState(false);\n\n    \n\n    const submitForm = (e) => {\n        e.preventDefault();\n        console.log(values);\n    }\n\n    const resetForm = useCallback(\n        (newValues = {}, newErrors = {}, newIsValid = false) => {\n            setValues(newValues);\n            setErrors(newErrors);\n            setIsValid(newIsValid);\n        },\n        [setValues, setErrors, setIsValid]\n    );\n\n    return { values, handleChange, errors, isValid, resetForm, submitForm };\n};"]},"metadata":{},"sourceType":"module"}