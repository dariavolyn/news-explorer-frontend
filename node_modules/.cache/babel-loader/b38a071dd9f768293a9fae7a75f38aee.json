{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\n\nfunction FormValues() {\n  _s();\n\n  const [values, setValues] = useState({});\n\n  const handleChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  return {\n    values,\n    handleChange,\n    setValues\n  };\n}\n\n_s(FormValues, \"jj5GeB6VwF55135U6pCdiR2sE48=\");\n\n_c = FormValues;\n\nfunction UseFormValidation() {\n  _s2();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n\n  const handleChange = event => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    setValues({ ...values,\n      [name]: value\n    });\n    setErrors({ ...errors,\n      [name]: target.validationMessage\n    });\n    setIsValid(target.closest('form').checkValidity());\n  };\n\n  const resetForm = useCallback((newValues = {}, newErrors = {}, newIsValid = false) => {\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n  }, [setValues, setErrors, setIsValid]);\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm\n  };\n}\n\n_s2(UseFormValidation, \"msMIfc7pG71dSFDSlZa7+l3GN6k=\");\n\n_c2 = UseFormValidation;\nexport { FormValues, UseFormValidation };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormValues\");\n$RefreshReg$(_c2, \"UseFormValidation\");","map":{"version":3,"sources":["/Users/dashon/Desktop/news-explorer-frontend/src/components/FormValidation/FormValidation.js"],"names":["React","useCallback","useState","FormValues","values","setValues","handleChange","event","target","value","name","UseFormValidation","errors","setErrors","isValid","setIsValid","validationMessage","closest","checkValidity","resetForm","newValues","newErrors","newIsValid"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;;AAGA,SAASC,UAAT,GAAsB;AAAA;;AAClB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMI,YAAY,GAAIC,KAAD,IAAW;AAC5B,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACAL,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACM,IAAD,GAAQD;AAArB,KAAD,CAAT;AACH,GALD;;AAOA,SAAO;AAAEL,IAAAA,MAAF;AAAUE,IAAAA,YAAV;AAAwBD,IAAAA;AAAxB,GAAP;AACH;;GAXQF,U;;KAAAA,U;;AAaT,SAASQ,iBAAT,GAA6B;AAAA;;AACzB,QAAM,CAACP,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMI,YAAY,GAAIC,KAAD,IAAW;AAC5B,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAME,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,UAAMD,KAAK,GAAGD,MAAM,CAACC,KAArB;AACAJ,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACM,IAAD,GAAQD;AAArB,KAAD,CAAT;AACAI,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACF,IAAD,GAAQF,MAAM,CAACQ;AAA5B,KAAD,CAAT;AACAD,IAAAA,UAAU,CAACP,MAAM,CAACS,OAAP,CAAe,MAAf,EAAuBC,aAAvB,EAAD,CAAV;AACH,GAPD;;AASA,QAAMC,SAAS,GAAGlB,WAAW,CACzB,CAACmB,SAAS,GAAG,EAAb,EAAiBC,SAAS,GAAG,EAA7B,EAAiCC,UAAU,GAAG,KAA9C,KAAwD;AACpDjB,IAAAA,SAAS,CAACe,SAAD,CAAT;AACAP,IAAAA,SAAS,CAACQ,SAAD,CAAT;AACAN,IAAAA,UAAU,CAACO,UAAD,CAAV;AACH,GALwB,EAMzB,CAACjB,SAAD,EAAYQ,SAAZ,EAAuBE,UAAvB,CANyB,CAA7B;AASA,SAAO;AAAEX,IAAAA,MAAF;AAAUE,IAAAA,YAAV;AAAwBM,IAAAA,MAAxB;AAAgCE,IAAAA,OAAhC;AAAyCK,IAAAA;AAAzC,GAAP;AACH;;IAxBQR,iB;;MAAAA,iB;AA0BT,SAASR,UAAT,EAAqBQ,iBAArB","sourcesContent":["import React, { useCallback, useState } from 'react';\n\n\nfunction FormValues() {\n    const [values, setValues] = useState({});\n\n    const handleChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        setValues({ ...values, [name]: value });\n    };\n\n    return { values, handleChange, setValues };\n}\n\nfunction UseFormValidation() {\n    const [values, setValues] = useState({});\n    const [errors, setErrors] = useState({});\n    const [isValid, setIsValid] = useState(false);\n\n    const handleChange = (event) => {\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n        setValues({ ...values, [name]: value });\n        setErrors({ ...errors, [name]: target.validationMessage });\n        setIsValid(target.closest('form').checkValidity());\n    };\n\n    const resetForm = useCallback(\n        (newValues = {}, newErrors = {}, newIsValid = false) => {\n            setValues(newValues);\n            setErrors(newErrors);\n            setIsValid(newIsValid);\n        },\n        [setValues, setErrors, setIsValid]\n    );\n\n    return { values, handleChange, errors, isValid, resetForm };\n}\n\nexport { FormValues, UseFormValidation };"]},"metadata":{},"sourceType":"module"}